import groovy.json.JsonSlurper
def packageSlurper = new JsonSlurper()
def packageJson = packageSlurper.parse file('../../package.json')
println "Building Lifekeyrn v"+packageJson.version

apply plugin: "com.android.application"
apply plugin: 'io.fabric'


import com.android.build.OutputFile

// react
project.ext.react = [
    bundleAssetName: "index.android.bundle",
    entryFile: "index.js",
    bundleInRelease: true,
    jsBundleDirRelease: "$buildDir/intermediates/assets/release",
    resourcesDirRelease: "$buildDir/intermediates/res/merged/release"
]

project.ext.react = [
    entryFile: "index.js"
]

apply from: "../../node_modules/react-native/react.gradle"

// react-native-vector-icons
apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"
apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'

    defaultConfig {
        applicationId "com.lifekeyrn"
        minSdkVersion 16
        targetSdkVersion 27
        versionCode 1
        versionName packageJson.version

        ndk {
            abiFilters "x86","armeabi-v7a"
        }

    }
    signingConfigs {
        release {
            storeFile file('../keystores/' + LIFEKEY_DEV_RELEASE_STORE_FILE)
            storePassword LIFEKEY_DEV_RELEASE_STORE_PASSWORD
            keyAlias LIFEKEY_DEV_RELEASE_KEY_ALIAS
            keyPassword LIFEKEY_DEV_RELEASE_KEY_PASSWORD
        }
    }
    splits {
        abi {
            enable enableSeparateBuildPerCPUArchitecture
            reset()
            universalApk true  // If true, also generate a universal APK
            include "x86","armeabi-v7a"
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            debuggable true
            jniDebuggable true
            renderscriptDebuggable true
        }
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            zipAlignEnabled true
            signingConfig signingConfigs.release
        }
    }
    /*
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
    */
}

dependencies {
    compile project(':react-native-camera')
    compile project(':react-native-code-push')
    compile project(':react-native-geocoder')
    compile project(':react-native-fingerprint-scanner')
    compile project(':react-native-crypto-module')
    compile project(':react-native-fingerprint-android')
    //compile project(':react-native-firebase')

    compile(project(':react-native-firebase')) {
        transitive = false
    }
    
    compile project(':react-native-svg')
    compile project(':react-native-dialogs')
    compile project(':react-native-vector-icons')

    compile 'com.facebook.fresco:animated-base-support:1.3.0'
    compile 'com.facebook.fresco:animated-gif:1.3.0'

    compile fileTree(dir: "libs", include: ["*.jar"])
    compile "com.android.support:appcompat-v7:27.1.1"
    compile "com.facebook.react:react-native:+"  // From node_modules

    compile 'com.crashlytics.sdk.android:crashlytics:2.9.3'
    compile 'com.android.support:multidex:1.0.3'
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

repositories {
    maven { url "https://jitpack.io" }
}

apply plugin: 'com.google.gms.google-services'
