import groovy.json.JsonSlurper
def packageSlurper = new JsonSlurper()
def packageJson = packageSlurper.parse file('../../package.json')
println "Building Lifekeyrn v"+packageJson.version

apply plugin: "com.android.application"


import com.android.build.OutputFile

// react
project.ext.react = [
    bundleAssetName: "index.android.bundle",
    entryFile: "index.android.js",
    bundleInRelease: true,
    jsBundleDirRelease: "$buildDir/intermediates/assets/release",
    resourcesDirRelease: "$buildDir/intermediates/res/merged/release"
]

apply from: "../../node_modules/react-native/react.gradle"

// react-native-vector-icons
apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = true

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        applicationId "com.lifekeyrn"
        minSdkVersion 16
        targetSdkVersion 22
        versionCode 1
        versionName packageJson.version
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
    }
    signingConfigs {
        release {
            storeFile file('../keystores/' + LIFEKEY_DEV_RELEASE_STORE_FILE)
            storePassword LIFEKEY_DEV_RELEASE_STORE_PASSWORD
            keyAlias LIFEKEY_DEV_RELEASE_KEY_ALIAS
            keyPassword LIFEKEY_DEV_RELEASE_KEY_PASSWORD
        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            zipAlignEnabled true
            signingConfig signingConfigs.release
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

dependencies {
    compile project(':react-native-fingerprint-android')
    compile project(':react-native-firebase')
    compile project(':react-native-image-picker')
    compile project(':react-native-svg')
    compile project(':react-native-dialogs')
    compile project(':react-native-camera')
    compile project(':react-native-vector-icons')

    compile 'com.facebook.fresco:animated-base-support:1.1.0'
    compile 'com.facebook.fresco:animated-gif:1.1.0'

    compile fileTree(dir: "libs", include: ["*.jar"])
    compile "com.android.support:appcompat-v7:23.0.2"
    compile "com.facebook.react:react-native:+"  // From node_modules
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

repositories {
    maven { url "https://jitpack.io" }
}

apply plugin: 'com.google.gms.google-services'
